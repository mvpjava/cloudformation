import boto3
import json

inspector = boto3.client('inspector2')
sns = boto3.client('sns')
codepipeline = boto3.client('codepipeline')


def lambda_handler(event, context):
    print(json.dumps(event, indent=2))  # Pretty-print the entire event
    
    # Extract user parameters from the CodePipeline event
    user_parameters = json.loads(event['CodePipeline.job']['data']['actionConfiguration']['configuration']['UserParameters'])
    print(user_parameters) # to see what response looks like after being formatted

    # Retrieve SNS_TOPIC_ARN and INSTANCE_ID
    sns_topic_arn = user_parameters['SNS_TOPIC_ARN']
    instance_id = user_parameters['INSTANCE_ID']
    job_id = event['CodePipeline.job']['id']

    if not sns_topic_arn or not instance_id:
        raise ValueError("SNS_TOPIC_ARN and INSTANCE_ID must be provided in the event data.")

    # List findings for specific EC2 instance with resource type and tag filter
    response = inspector.list_findings(
        filterCriteria={
            'resourceType': [{'comparison': 'EQUALS', 'value': 'AWS_EC2_INSTANCE'}],
            'resourceId': [{'comparison': 'EQUALS', 'value': instance_id}],
            'resourceTags': [{'comparison': 'EQUALS', 'key': 'InspectorTarget', 'value': 'CVE'}]
        }
    )

    findings = response['findings']
    for finding in findings:
        if finding['severity'] == 'HIGH':
            # Send SNS notification
            message = {
                'InstanceId': instance_id,
                'FindingId': finding['findingArn'],
                'Severity': finding['severity'],
                'Title': finding['title'],
                'Description': finding['description']
            }
            print(f"InstanceId: {instance_id}, FindingId: {finding['findingArn']}, Severity: {finding['severity']}, Title: {finding['title']}, Description: {finding['description']}")

            sns.publish(
                TopicArn=sns_topic_arn,
                Message=json.dumps(message),
                Subject='High Severity Security Finding Detected'
            )
            print("High severity finding detected; security scan failed.")
            # Notify CodePipeline of failure
            codepipeline.put_job_failure_result(
                jobId=job_id,
                failureDetails={
                    'message': str(message),
                    'type': 'JobFailed'
                }
            )
            return {"status": "FAIL"}  # Return status for CodePipeline

    # If no high-severity finding is found
    print("No high severity findings; security scan passed.")

    # Notify CodePipeline of success
    codepipeline.put_job_success_result(
        jobId=job_id,
        outputVariables={ 
            'status' : 'PASS' 
        }
    )

    return {"status": "PASS"}  
    
